WEBVTT

0
00:00:00.140 --> 00:00:04.390
one of the major benefits of setting up a shade with a procedural workflow.

1
00:00:04.400 --> 00:00:06.410
Is that through its several parameters,

2
00:00:06.420 --> 00:00:11.790
A procedural shader is not only highly adjustable but also very nicely animated.

3
00:00:11.790 --> 00:00:15.560
All you can simply just like any other parameter and blender

4
00:00:15.840 --> 00:00:19.210
animate your shader parameters by setting key frames

5
00:00:19.220 --> 00:00:21.860
and editing f curves in the graph editor

6
00:00:22.040 --> 00:00:25.880
that can be used for example to set up your characters with dynamic

7
00:00:25.880 --> 00:00:29.530
shakers that can be animated just like the bones of an armature.

8
00:00:29.540 --> 00:00:31.270
But what I want to talk about in this

9
00:00:31.270 --> 00:00:35.320
video specifically is using the procedural methods that I've shown

10
00:00:35.320 --> 00:00:39.270
you in this course to even create procedural animations without

11
00:00:39.270 --> 00:00:41.960
touching key frames and the graph editor at all.

12
00:00:42.040 --> 00:00:45.360
This workflow is definitely not always the best way to do it

13
00:00:45.540 --> 00:00:50.210
but for very general animation of for example periodic effects

14
00:00:50.210 --> 00:00:53.960
or variation on top of the manual animation over time

15
00:00:54.340 --> 00:00:58.960
it is usually much more convenient and flexible to set the animation up that way,

16
00:00:59.340 --> 00:01:02.720
the easiest way to integrate a time parameter in the shader

17
00:01:02.720 --> 00:01:06.750
no tree is to create a driver that references the current frame

18
00:01:07.140 --> 00:01:09.130
as I've shown in the previous video,

19
00:01:09.140 --> 00:01:12.270
you can simply type hash frame into the value

20
00:01:12.270 --> 00:01:15.440
field to directly linked to the current frame.

21
00:01:15.450 --> 00:01:18.280
That works in almost every value field and blender.

22
00:01:18.290 --> 00:01:20.550
And it's a super quick way to animate

23
00:01:20.560 --> 00:01:23.080
any parameter without having to create multiple key

24
00:01:23.080 --> 00:01:25.990
frames in the same way by including the

25
00:01:25.990 --> 00:01:29.550
current frame variable in a script driver expression.

26
00:01:29.740 --> 00:01:32.860
You can create all sorts of dependencies on the time.

27
00:01:33.340 --> 00:01:37.040
This works essentially by defining the expression of the value that

28
00:01:37.040 --> 00:01:40.080
you want to drive as a function over the time.

29
00:01:40.090 --> 00:01:44.410
The input of that function is simply the current frame and the output.

30
00:01:44.410 --> 00:01:45.810
The animation parameter.

31
00:01:45.890 --> 00:01:49.170
Working with procedural animation in the Shader editor,

32
00:01:49.180 --> 00:01:52.150
you even have the benefit of not having to define

33
00:01:52.160 --> 00:01:55.660
everything from within the driver expression of the value input.

34
00:01:56.040 --> 00:01:59.450
You can also simply have the frame parameter as an input value.

35
00:01:59.450 --> 00:02:04.050
Note in the no tree and use the math note operations to adjust the animation.

36
00:02:04.540 --> 00:02:07.050
That way you can even expose parameters

37
00:02:07.050 --> 00:02:09.550
that define the properties of the animation,

38
00:02:09.560 --> 00:02:11.450
like the animation speed,

39
00:02:11.460 --> 00:02:15.960
as separate inputs and even as inputs of a note group for example,

40
00:02:16.440 --> 00:02:19.950
I mentioned previously in the chapter of a space manipulation

41
00:02:20.340 --> 00:02:22.980
that we would do some time manipulation as well.

42
00:02:22.990 --> 00:02:25.170
And this is the moment I was referring to.

43
00:02:25.180 --> 00:02:29.930
Just in the same way that you can remap warp and fold coordinate vectors.

44
00:02:29.940 --> 00:02:34.220
You can also manipulate how the time input animates the parameters.

45
00:02:34.230 --> 00:02:38.310
Most of the concepts of how we have been manipulating space in the

46
00:02:38.310 --> 00:02:42.560
previous chapters can be applied in the same way for manipulating time.

47
00:02:43.340 --> 00:02:45.940
The biggest difference is that the time parameter

48
00:02:45.950 --> 00:02:48.350
is usually the same over the whole map.

49
00:02:48.740 --> 00:02:51.350
It only has a single component instead of three,

50
00:02:51.360 --> 00:02:53.760
which means that it is much simpler to control

51
00:02:53.770 --> 00:02:55.960
even though it might take some more getting used to

52
00:02:56.440 --> 00:03:00.910
in this sense that is maybe more accurate to compare the time manipulation to

53
00:03:00.910 --> 00:03:03.340
the parameter calibration that he was also

54
00:03:03.340 --> 00:03:05.530
talking about in the previous chapter you

55
00:03:05.530 --> 00:03:10.380
can just think about the input parameter being the time as the current frame

56
00:03:10.390 --> 00:03:13.430
and the calibration defining how the animated

57
00:03:13.430 --> 00:03:16.360
functionality behaves depending on the time.

58
00:03:16.940 --> 00:03:21.960
The calibration essentially defines what it means to be at frame zero and

59
00:03:21.960 --> 00:03:27.700
for example frame 100 and how it transitions between the different operations that

60
00:03:27.700 --> 00:03:31.620
define the manipulation of the time Parameters are the same as what we

61
00:03:31.620 --> 00:03:33.820
previously established for the other use

62
00:03:33.820 --> 00:03:37.160
cases addition and subtraction define an offset

63
00:03:37.440 --> 00:03:39.980
just that this officer, it is now in time

64
00:03:40.170 --> 00:03:42.260
and not along an axis in space,

65
00:03:42.840 --> 00:03:46.650
multiplication or division define a squash or stretch,

66
00:03:47.140 --> 00:03:48.730
but for the time parameter

67
00:03:48.830 --> 00:03:53.430
this means a change in speed and northern texture scale and

68
00:03:53.430 --> 00:03:56.950
apart from those of course you can adjust the time parameter

69
00:03:56.950 --> 00:04:01.540
to follow a non linear interpolation which results in a changing

70
00:04:01.540 --> 00:04:06.970
speed over time here for example using exponential functions is great.

71
00:04:06.970 --> 00:04:07.450
Again

72
00:04:07.740 --> 00:04:11.250
either to make the parameter accelerate faster and faster

73
00:04:11.640 --> 00:04:16.560
or to define a saturation that approaches a maximum more and more slowly.

74
00:04:17.040 --> 00:04:19.079
Another very useful way of using the time

75
00:04:19.079 --> 00:04:22.560
parameter is to create some type of periodic animation

76
00:04:23.240 --> 00:04:27.650
to achieve that you can use for example the sign or co sign operation.

77
00:04:28.540 --> 00:04:33.760
Those return a value that is smoothly oscillates between -1 and positive one.

78
00:04:34.240 --> 00:04:35.660
The range of this oscillation.

79
00:04:35.660 --> 00:04:40.150
You can of course adjust to the range that you need by using a map range. Note

80
00:04:40.740 --> 00:04:43.590
Also you have to keep in mind that the period for when

81
00:04:43.590 --> 00:04:48.450
a full oscillation of the sign or coastline repeats is two pi.

82
00:04:49.040 --> 00:04:52.560
So if you simply use the frame variable as the argument

83
00:04:52.560 --> 00:04:56.960
of the function then it oscillates every three point something frames

84
00:04:57.440 --> 00:04:59.410
and usually that is not what you want.

85
00:04:59.420 --> 00:05:03.260
So you'll also have to calibrate the input to the required range.

86
00:05:03.740 --> 00:05:08.310
The best way to do so is to divide the frame parameter by the desired period

87
00:05:08.310 --> 00:05:10.720
length and then multiplying it by two times

88
00:05:10.720 --> 00:05:13.710
pi before plugging it into the sign operation.

89
00:05:14.000 --> 00:05:17.450
And as you can see now the oscillation repeats exactly after

90
00:05:17.450 --> 00:05:21.050
the amount of frames that is set as an additional parameter.

91
00:05:21.740 --> 00:05:24.180
If you want a simple linear repetition,

92
00:05:24.490 --> 00:05:28.250
you can as usual also use the fraction or ping pong operation.

93
00:05:28.740 --> 00:05:32.130
Just like we have seen for the manipulation of other parameters.

94
00:05:32.140 --> 00:05:35.400
You can use the different operations linked together as

95
00:05:35.400 --> 00:05:39.140
modules to combine the individual operations of offsetting,

96
00:05:39.140 --> 00:05:40.550
squashing etcetera,

97
00:05:40.560 --> 00:05:44.660
creating just the right transformation for the time parameter that you need

98
00:05:44.840 --> 00:05:46.360
that way you can build together

99
00:05:46.360 --> 00:05:49.460
a custom and interesting looking procedural animation

100
00:05:50.140 --> 00:05:54.310
but just as important as knowing how to set up a procedural animation with a

101
00:05:54.310 --> 00:05:57.000
time parameter is knowing what to control the

102
00:05:57.000 --> 00:05:59.610
shading setup to achieve the desired effect.

103
00:05:59.620 --> 00:06:01.260
You can use the time parameters.

104
00:06:01.260 --> 00:06:04.860
Who animate anything in the shader that accepts a value input

105
00:06:05.340 --> 00:06:07.350
and you can go completely crazy with that.

106
00:06:07.840 --> 00:06:12.330
But I do want to go over a couple of the more usual shaded properties to animate

107
00:06:12.450 --> 00:06:13.860
and the techniques to do so.

108
00:06:14.740 --> 00:06:18.070
Some of the most basic ways of introducing animation into

109
00:06:18.070 --> 00:06:22.800
a shader is animating the fundamental transformations of translation,

110
00:06:22.800 --> 00:06:26.760
rotation or scale that works just the same as you would expect.

111
00:06:27.140 --> 00:06:30.050
You can simply use the actual operation responsible for the

112
00:06:30.050 --> 00:06:33.460
transformation you need in combination with an animated input.

113
00:06:33.840 --> 00:06:39.660
So for example, you can simply animate the offset vector in a vector ad note

114
00:06:40.040 --> 00:06:42.760
to gradually shift the texture along an axis.

115
00:06:43.140 --> 00:06:46.650
I'll just use a vector scale operation to define

116
00:06:46.650 --> 00:06:49.350
the direction and scale it with the time parameter.

117
00:06:49.740 --> 00:06:54.030
A simple offset and combination with a custom coordinate system

118
00:06:54.040 --> 00:06:57.110
can even translate into all kinds of other effects.

119
00:06:57.150 --> 00:07:01.950
For example, when I set up a rotational repetition with polar coordinates,

120
00:07:01.960 --> 00:07:05.660
as I've shown you way back in the chapter about shape creation,

121
00:07:06.040 --> 00:07:09.960
adding the time parameter as a shift value on top of the angular

122
00:07:09.960 --> 00:07:13.440
component creates a nice rotation without having

123
00:07:13.440 --> 00:07:15.550
to rotate the whole coordinate system.

124
00:07:16.140 --> 00:07:19.050
What this is is basically just offsetting the angle.

125
00:07:19.840 --> 00:07:24.770
Another basic idea of animating a shader that is based on a noise is simply

126
00:07:24.770 --> 00:07:27.430
increasing the dimension of that noise and

127
00:07:27.430 --> 00:07:31.380
then animating that additional unused dimension parameter.

128
00:07:31.390 --> 00:07:35.920
That is very useful to create a nice and smooth variation over time

129
00:07:35.930 --> 00:07:40.450
that truly changes how the noise looks opposed to simply warping a drowned

130
00:07:41.040 --> 00:07:42.630
but warping it around

131
00:07:42.760 --> 00:07:45.960
is another method of animating a texture in a subtle way.

132
00:07:46.540 --> 00:07:50.880
If you remember something that I've shown multiple times throughout the course is

133
00:07:50.880 --> 00:07:54.930
to create some variation in a texture by distorting the coordinate space.

134
00:07:55.140 --> 00:07:57.900
I've usually done this by using a noise texture and

135
00:07:57.900 --> 00:08:00.660
a mixed Rgb notes set to a linear light.

136
00:08:00.670 --> 00:08:04.260
This distortion, for example, can also be animated.

137
00:08:04.640 --> 00:08:09.460
This seemingly turns any texture into a slightly moving liquid.

138
00:08:10.040 --> 00:08:13.450
You can also use a noise driven by the time parameter directly

139
00:08:13.660 --> 00:08:15.650
instead of using periodic behavior

140
00:08:16.040 --> 00:08:20.190
that gives you essentially a parameter that is noisy over time.

141
00:08:20.200 --> 00:08:22.970
The way to do this is to simply use a one

142
00:08:22.970 --> 00:08:27.090
dimensional noise texture and instead of mapping it onto a spaceship,

143
00:08:27.090 --> 00:08:31.250
coordinate using the time parameter directly as the w input.

144
00:08:31.740 --> 00:08:34.789
The resulting value and color can then be used as

145
00:08:34.789 --> 00:08:39.559
a parameter that randomly but smoothly oscillates around 0.5.

146
00:08:40.039 --> 00:08:43.770
The scale of the noise controls the overall frequency

147
00:08:43.970 --> 00:08:46.760
and the detail the level of flickering on top.

148
00:08:47.340 --> 00:08:49.730
Something I want to add in general about

149
00:08:49.730 --> 00:08:52.850
the application of procedural animation is that the

150
00:08:52.850 --> 00:08:55.890
perceived speed of something is not only dependent

151
00:08:55.890 --> 00:08:58.370
on how quickly the time parameter changes,

152
00:08:58.380 --> 00:09:01.260
but also on how much distance or change

153
00:09:01.260 --> 00:09:04.350
the resulting map undergoes in a specific time.

154
00:09:04.840 --> 00:09:10.260
This way stretching an animated texture can have just as much an effect on how

155
00:09:10.260 --> 00:09:13.450
fast the movement is in certain places as

156
00:09:13.450 --> 00:09:16.210
changing the time parameter at different rates.

157
00:09:16.230 --> 00:09:20.800
This is in the fact that you have to keep in mind is it can be used as a trick,

158
00:09:20.810 --> 00:09:23.290
but it might also be something that you want to avoid.