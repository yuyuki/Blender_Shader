WEBVTT

0
00:00:00.240 --> 00:00:03.330
one of the core elements of procedural shading is that you

1
00:00:03.330 --> 00:00:07.260
can dynamically incorporate properties of the geometry into the shader.

2
00:00:07.740 --> 00:00:12.890
Those are to name some examples, the normal direction that the surface is facing,

3
00:00:12.900 --> 00:00:17.060
the curvature of the mesh or the global position of the surface.

4
00:00:17.440 --> 00:00:19.470
Information about the geometry like this

5
00:00:19.480 --> 00:00:22.020
can be used alongside with procedural methods

6
00:00:22.020 --> 00:00:26.110
of creating schrader's to make a shader sensitive to the context that it

7
00:00:26.110 --> 00:00:30.470
is set up in this way the geometric information that I mentioned can

8
00:00:30.470 --> 00:00:34.010
be used to cause a layer of dust to appear only on surfaces,

9
00:00:34.010 --> 00:00:37.540
pointing upwards more dust to accumulate in crevices and

10
00:00:37.540 --> 00:00:40.230
the gradient of dust building up from the ground.

11
00:00:40.240 --> 00:00:44.260
And of course it can also be used for any other costs that is not just related

12
00:00:44.840 --> 00:00:47.680
to give you a few examples of the possibilities.

13
00:00:47.690 --> 00:00:49.650
I just want to show you the use cases

14
00:00:49.650 --> 00:00:52.480
that I mentioned but there are several other inputs

15
00:00:52.480 --> 00:00:54.900
that can be used as a source to include

16
00:00:54.900 --> 00:00:57.440
additional information in your shader in this video.

17
00:00:57.440 --> 00:01:00.330
I want to mostly emphasize the general concept

18
00:01:00.330 --> 00:01:03.260
of using various sources of information as inputs.

19
00:01:03.440 --> 00:01:07.760
You can find all the available inputs in the input category of the adding menu.

20
00:01:07.840 --> 00:01:12.190
Be aware though that not all of these features are available in both better engines.

21
00:01:12.200 --> 00:01:15.250
So let's quickly go through the examples 1x1.

22
00:01:15.640 --> 00:01:18.640
Keep in mind that this is just a selection of examples.

23
00:01:18.650 --> 00:01:22.750
An ocean of other things is possible using all kinds of input information

24
00:01:23.140 --> 00:01:27.280
to achieve the dust layer that is dynamically on top of the surface.

25
00:01:27.290 --> 00:01:30.530
I simply use the normal cornice of the geometry.

26
00:01:30.540 --> 00:01:33.230
The important differentiation here is between

27
00:01:33.230 --> 00:01:36.020
the global normals from the geometry node

28
00:01:36.030 --> 00:01:41.160
and the local normals that rotate with the object from the texture coordinate node

29
00:01:41.340 --> 00:01:44.290
to turn the normal cornice into a mask of victories.

30
00:01:44.290 --> 00:01:46.350
That point in a similar direction,

31
00:01:46.640 --> 00:01:50.750
you can use a vector math notes, set to the dot product operation,

32
00:01:51.240 --> 00:01:55.640
the dot product is a mathematical operation that essentially gives

33
00:01:55.640 --> 00:01:59.400
you a measure of how parallel to normal vectors are.

34
00:01:59.410 --> 00:02:03.070
If the dot product is one, they are totally parallel.

35
00:02:03.080 --> 00:02:04.290
If it is zero,

36
00:02:04.300 --> 00:02:07.770
they are standing at a 90 degree angle to each other and

37
00:02:07.770 --> 00:02:10.560
if it is negative they are standing opposite to each other.

38
00:02:10.740 --> 00:02:13.140
So by choosing the second vector,

39
00:02:13.150 --> 00:02:16.760
you can select the direction that the mosque should be pointing in

40
00:02:17.040 --> 00:02:21.800
By simply choosing the vector of 001 that points directly upwards.

41
00:02:21.810 --> 00:02:26.710
That gives us exactly the mosque that we need and that mosque can then simply be used

42
00:02:26.710 --> 00:02:31.330
to make the dust layer on top of the material to add the dust to crevices,

43
00:02:31.340 --> 00:02:34.160
you can simply use the ambient occlusion node

44
00:02:34.640 --> 00:02:36.190
that works in both E V.

45
00:02:36.190 --> 00:02:39.450
And cycles and gives you a mosque of where multiple

46
00:02:39.450 --> 00:02:43.850
close surfaces create a narrow spot where light gets trapped.

47
00:02:44.240 --> 00:02:48.260
Ambient occlusion also takes into account the closeness of other

48
00:02:48.260 --> 00:02:52.430
objects or the dust application that is perfectly fine.

49
00:02:52.440 --> 00:02:56.070
But in other applications you might want to use, for example,

50
00:02:56.070 --> 00:02:59.020
the point in this output from the geometry note instead,

51
00:02:59.030 --> 00:03:01.800
this works differently than ambient occlusion that only

52
00:03:01.800 --> 00:03:04.460
considers the curvature of the mash itself.

53
00:03:04.540 --> 00:03:08.050
The point of this feature however only works with cycles currently

54
00:03:08.440 --> 00:03:11.600
To create a gradient that goes from the ground level upwards.

55
00:03:11.610 --> 00:03:14.210
We can simply use the global Coronas from the

56
00:03:14.210 --> 00:03:17.850
geometry note just separate the vector's components and map,

57
00:03:17.850 --> 00:03:21.460
these that component from the required range 0-1

58
00:03:23.140 --> 00:03:23.450
here.

59
00:03:23.450 --> 00:03:26.100
You can also see something that is very nice about

60
00:03:26.100 --> 00:03:29.380
working with these procedural setups in combination with the V.

61
00:03:29.390 --> 00:03:33.720
If the shader is sensitive to the geometry than any changes in the model,

62
00:03:33.730 --> 00:03:35.900
immediately affect how the shader looks,

63
00:03:35.910 --> 00:03:40.260
everything updates in real time and you can directly see what you're working on.

64
00:03:40.440 --> 00:03:43.950
Another input type that I want to mention here are vertex colors.

65
00:03:44.040 --> 00:03:46.360
Vertex colors are not by themselves a

66
00:03:46.360 --> 00:03:49.510
procedural input but they are incredibly useful to

67
00:03:49.510 --> 00:03:52.050
make a shader accessible for easy manual

68
00:03:52.060 --> 00:03:54.860
our direction when composing a procedural shader,

69
00:03:54.870 --> 00:03:58.120
we will be using vertex colors in the following chapter about

70
00:03:58.120 --> 00:04:02.460
shader composition for easily masking together different parts of a shader.

71
00:04:02.640 --> 00:04:07.050
Vertex colors can also be procedurally driven by other interactions and blender.

72
00:04:07.340 --> 00:04:10.350
If you enable dynamic paint from the physics properties,

73
00:04:10.360 --> 00:04:15.680
you can set up the canvas to output into a vertex color layer, which in turn,

74
00:04:15.690 --> 00:04:17.730
you can then also using the shader.

75
00:04:17.740 --> 00:04:21.800
I don't want to get into too much detail how to set up dynamic pain at this point.

76
00:04:21.810 --> 00:04:23.960
You can check out the example scene if you want to.

77
00:04:24.040 --> 00:04:27.160
There are many options that you can set it up with and

78
00:04:27.170 --> 00:04:30.850
I want to lay focus on the general integration of external information.

79
00:04:31.040 --> 00:04:35.910
Just know that using dynamic paint either with vertex colors or image textures is

80
00:04:35.910 --> 00:04:38.090
a great way for example to gain

81
00:04:38.090 --> 00:04:40.960
information about the proximity of multiple objects.

82
00:04:40.970 --> 00:04:44.770
This can work similar to ambient occlusion between objects but it

83
00:04:44.770 --> 00:04:48.050
has a lot more adjust ability and functionality than that.

84
00:04:48.140 --> 00:04:50.940
This proximity can be extremely useful for example,

85
00:04:50.940 --> 00:04:54.980
to transition between different materials on multiple objects and create the

86
00:04:54.980 --> 00:04:58.830
facts around objects that dynamically adjust to the scenes layout.

87
00:04:58.840 --> 00:05:03.610
Using dynamic paint, I added a melting Suzanne to the example seen here,

88
00:05:03.610 --> 00:05:09.140
the measure of Suzanne is taken as the brush and the floor and the rug as the canvas.

89
00:05:09.150 --> 00:05:14.160
And that way I can simply access the mask of the measures proximity as a

90
00:05:14.160 --> 00:05:19.200
vertex Scalia and use it to control the shader for it to update automatically.

91
00:05:19.210 --> 00:05:23.570
You have to play back the animation dynamic paint also has a ton of other

92
00:05:23.570 --> 00:05:27.820
cool settings that can be used to drive a shader with various types of effects.

93
00:05:27.830 --> 00:05:30.940
I won't go into these any further at this point but please do

94
00:05:30.940 --> 00:05:34.580
go ahead and experiment with them yourself as well as a conclusion.

95
00:05:34.590 --> 00:05:37.880
I just want to point out again that for procedural shading and

96
00:05:37.880 --> 00:05:41.340
blender you have a lot of different types of inputs that can be

97
00:05:41.340 --> 00:05:45.580
used to put together a dynamic shader that is sensitive to the scenes

98
00:05:45.580 --> 00:05:49.330
context with the knowledge of what tools you have at your expense,

99
00:05:49.340 --> 00:05:52.120
a good technical understanding of the problem you want

100
00:05:52.120 --> 00:05:54.850
to solve and a little bit of creativity.

101
00:05:54.860 --> 00:05:58.850
I assure you that more things are possible somehow than you might think. At first,

102
00:05:59.240 --> 00:06:01.760
I've made this experience multiple times in the past.