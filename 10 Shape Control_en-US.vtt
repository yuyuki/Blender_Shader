WEBVTT

0
00:00:00.340 --> 00:00:02.070
now that we went over the basics of how to

1
00:00:02.070 --> 00:00:05.530
handle values with notes and also saw some procedural noises.

2
00:00:05.540 --> 00:00:09.550
We can start creating actual shapes and patterns from scratch shapes and

3
00:00:09.550 --> 00:00:13.180
patterns in general are the very foundation of most procedural shakers.

4
00:00:13.190 --> 00:00:16.660
So it is important to have a certain sense of how to handle them before.

5
00:00:16.660 --> 00:00:19.920
We have only been working with a single dimension for shapes,

6
00:00:19.920 --> 00:00:21.760
we will have to use multiple dimensions.

7
00:00:21.940 --> 00:00:24.100
This is where it can get complicated easily.

8
00:00:24.110 --> 00:00:27.260
There are a couple of universal ways to generate shapes

9
00:00:27.280 --> 00:00:30.450
that I want to recommend and explain here in general what

10
00:00:30.450 --> 00:00:34.110
defines a shape are the lines that follow a constant value

11
00:00:34.120 --> 00:00:37.060
and in particular the path where the value is zero.

12
00:00:37.240 --> 00:00:41.030
So manipulating gradients depending on the location

13
00:00:41.040 --> 00:00:43.150
is the best way to define shapes

14
00:00:43.740 --> 00:00:48.130
when you have a gradient, like simply the why component of a coordinate vector,

15
00:00:48.270 --> 00:00:52.650
you can easily create a straight edge by just using a math notes said

16
00:00:52.650 --> 00:00:57.930
to greater than that separates the areas below and above a certain value.

17
00:00:57.940 --> 00:01:00.720
Now it's time to introduce a second dimension

18
00:01:00.730 --> 00:01:02.960
and manipulate the profile of that edge.

19
00:01:03.040 --> 00:01:04.959
Let's grab the X. Component as well.

20
00:01:05.040 --> 00:01:08.460
And combined with the white component using a subtract operation

21
00:01:08.940 --> 00:01:11.550
as you can see the angle of the edge has changed.

22
00:01:11.560 --> 00:01:14.560
What happened is that the edge that we previously

23
00:01:14.560 --> 00:01:17.930
had is shifted depending on the X coordinate.

24
00:01:17.940 --> 00:01:20.480
When I now manipulate that shift value.

25
00:01:20.490 --> 00:01:21.800
With another math note,

26
00:01:21.810 --> 00:01:25.650
you can see that I get complete control over the resulting edge

27
00:01:29.740 --> 00:01:31.630
but as I've shown before,

28
00:01:31.640 --> 00:01:35.020
there are more methods to control values than just the math node.

29
00:01:35.030 --> 00:01:39.990
If for example, I take an RgB curves note to manipulate the shift value,

30
00:01:40.000 --> 00:01:43.410
I get direct control over the resulting profile off the edge.

31
00:01:43.420 --> 00:01:48.250
But the RgB curves note operates in the range between zero and one.

32
00:01:48.640 --> 00:01:52.750
So the shape control is bound to this quarter of the plane here

33
00:01:53.140 --> 00:01:56.090
where both used coordinates are in that range,

34
00:01:56.180 --> 00:02:00.460
but that can be changed by remapping the range of the values that are used.

35
00:02:00.940 --> 00:02:04.120
The easiest way to do that is using the map range note,

36
00:02:04.130 --> 00:02:07.530
we can just remap the X coordinate that goes into the curves.

37
00:02:07.530 --> 00:02:10.660
Note from the range minus 1 to 1

38
00:02:11.140 --> 00:02:12.760
of the object coordinate space

39
00:02:13.240 --> 00:02:14.350
20-1

40
00:02:14.840 --> 00:02:16.550
where the curves note operates

41
00:02:17.140 --> 00:02:20.260
now we just have to remap the other coordinate the same way.

42
00:02:20.640 --> 00:02:27.380
But here I will use the math node set to multiply add and put both inputs 2.5.

43
00:02:27.400 --> 00:02:30.280
That has the exact same effect as the map range.

44
00:02:30.280 --> 00:02:33.370
Note, in this case it is just using different inputs.

45
00:02:33.940 --> 00:02:36.100
But other than changing the range,

46
00:02:36.110 --> 00:02:40.290
there is another useful way of re mapping the values that can be applied here.

47
00:02:40.300 --> 00:02:44.180
If I switch the multiply add operation with absolute

48
00:02:44.190 --> 00:02:46.370
you can see that the shape is being mirrored

49
00:02:46.380 --> 00:02:49.770
to the other side networks because the absolute operation

50
00:02:49.780 --> 00:02:52.750
flips all negative values around zero to be positive,

51
00:02:52.940 --> 00:02:55.460
creating the same gradient mirrors like this.

52
00:02:55.840 --> 00:02:58.410
So you can think of using the absolute operation

53
00:02:58.420 --> 00:03:02.030
on incoming coordinates just as the mirror modifier.

54
00:03:02.120 --> 00:03:05.950
We will see similar analogies of operations in the following chapters.

55
00:03:06.340 --> 00:03:09.850
A useful way to generate approximately circular shapes.

56
00:03:09.860 --> 00:03:11.800
Is using polar coordinates.

57
00:03:11.810 --> 00:03:15.090
These instead of giving you information about the position

58
00:03:15.090 --> 00:03:17.060
of a point on the X and the Y

59
00:03:17.060 --> 00:03:23.180
axis are based on the distance to the origin or radius and the angle of the direction.

60
00:03:23.190 --> 00:03:25.960
There is an easy way to calculate these coordinates.

61
00:03:26.040 --> 00:03:28.840
You can get the angle by just simply using the

62
00:03:28.850 --> 00:03:32.360
architect into operation on the X and the Y coordinate.

63
00:03:32.540 --> 00:03:35.560
You can see that this creates this circular gradient around the

64
00:03:35.560 --> 00:03:40.540
origin but the resulting angle is in radiance where a full rotation

65
00:03:40.540 --> 00:03:44.150
is two pi and here it goes from negative pi to

66
00:03:44.150 --> 00:03:47.260
positive pi which is not that useful for us right now.

67
00:03:47.270 --> 00:03:51.080
But you can easily remap this range of 0 to 1.

68
00:03:51.090 --> 00:03:56.140
Using the map range note, You can simply type in pie and -9, blending,

69
00:03:56.140 --> 00:03:58.160
knows how to translate this into a number.

70
00:03:58.540 --> 00:04:02.480
The radius is simply the length of the coordinate vector,

71
00:04:02.490 --> 00:04:05.600
which we can easily get with a vector math node.

72
00:04:05.700 --> 00:04:08.340
But we need to be careful here This way

73
00:04:08.350 --> 00:04:10.980
all three components are considered for the radius.

74
00:04:10.990 --> 00:04:15.630
What usually want with polar coordinates is for the radius to be independent

75
00:04:15.630 --> 00:04:18.470
from the zet component that translates into

76
00:04:18.480 --> 00:04:21.810
cylindrical coordinates opposed to spherical coordinates.

77
00:04:21.820 --> 00:04:25.520
So what I do for that is just to create a combined X, Y,

78
00:04:25.520 --> 00:04:31.800
Z node and grab only the X and the Y component to detach the zet component right now

79
00:04:31.810 --> 00:04:34.570
we are only operating on a plane where the

80
00:04:34.600 --> 00:04:37.410
component is zero so it doesn't really matter.

81
00:04:37.420 --> 00:04:40.450
But when you're using a three dimensional coordinate space,

82
00:04:40.740 --> 00:04:42.560
it can be important to specify this.

83
00:04:43.140 --> 00:04:46.420
Now that we have the information about the radius and the angle.

84
00:04:46.580 --> 00:04:49.050
We can use that to generate circular shapes.

85
00:04:49.440 --> 00:04:53.550
That works just the same way as with the Cartesian coordinates, X and Y.

86
00:04:53.940 --> 00:04:56.830
Just manipulate the angle with an RgB curves.

87
00:04:56.830 --> 00:04:59.460
Note and subtract that from the radius.

88
00:04:59.940 --> 00:05:02.920
You can see that the shifting works a bit differently here.

89
00:05:02.960 --> 00:05:05.280
Now you can shift the distance of the edge from

90
00:05:05.280 --> 00:05:08.560
the center along the radius depending on the angle.

91
00:05:08.600 --> 00:05:10.230
If you want the shape to be closed,

92
00:05:10.240 --> 00:05:12.190
you have to make sure that the starting point

93
00:05:12.200 --> 00:05:14.640
and the endpoint are both at the same level.

94
00:05:14.650 --> 00:05:18.750
Also with polar coordinates, it can be very useful to mirror the shape here.

95
00:05:18.750 --> 00:05:22.250
I will just make sure that the angle starts in a negative range. Again

96
00:05:22.640 --> 00:05:25.040
by defining the mapping minimum at zero.

97
00:05:25.050 --> 00:05:27.650
So it ranges from negative 12 positive one

98
00:05:27.660 --> 00:05:30.330
and then apply the absolute operation to that.

99
00:05:30.340 --> 00:05:33.650
And now we can create the shape more easily with a mirrored function.

100
00:05:34.740 --> 00:05:36.630
When I zoom in very closely in here,

101
00:05:36.640 --> 00:05:39.390
you can see the same stepping artifacts that I pointed

102
00:05:39.390 --> 00:05:42.160
out in the previous chapter on the procedural portrait.

103
00:05:42.190 --> 00:05:45.400
These are artifacts caused by using the RGB curves.

104
00:05:45.400 --> 00:05:49.940
Note, they don't appear when instead using only math nodes for example.

105
00:05:49.950 --> 00:05:52.610
But the major benefit of the RGB curves note is

106
00:05:52.610 --> 00:05:55.050
that they are very intuitive and easy to use.

107
00:05:55.340 --> 00:05:58.840
Also the stepping artifacts are very minor and it

108
00:05:58.840 --> 00:06:01.060
is a valid option to use the RGB curves.

109
00:06:01.060 --> 00:06:03.460
Note when you just want simple control

110
00:06:04.440 --> 00:06:08.510
a lot of the time, you don't actually want your shape to having a hard edge like that.

111
00:06:08.520 --> 00:06:11.600
So rather than using the greater than operation,

112
00:06:11.610 --> 00:06:13.760
you can just replace it with a subtraction

113
00:06:14.440 --> 00:06:18.550
with that. We still have gradual information of the difference between both maps

114
00:06:19.340 --> 00:06:21.510
to increase the hardness of this edge.

115
00:06:21.570 --> 00:06:24.710
You can just simply multiply the gradient by a factor.

116
00:06:25.050 --> 00:06:28.060
Then you can still clamp it to get a mask between zero and one.

117
00:06:28.440 --> 00:06:31.120
You can see that the length of this fade is

118
00:06:31.120 --> 00:06:33.870
not the same over the whole shape and that is due

119
00:06:33.870 --> 00:06:36.560
to the way that the shape is created and it

120
00:06:36.560 --> 00:06:38.960
depends on the slope of the curve that you use.

121
00:06:39.440 --> 00:06:41.080
You might think that it should be easy to

122
00:06:41.080 --> 00:06:43.750
just fade the edge by applying a blur operation.

123
00:06:43.790 --> 00:06:47.070
But due to the vector based nature of the shading system,

124
00:06:47.080 --> 00:06:49.360
an operation like that is not all that simple.

125
00:06:49.740 --> 00:06:52.860
I will touch on and work around on that topic at the end of this chapter